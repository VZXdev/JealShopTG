import os
import json
import time
import urllib.request
import urllib.parse
from datetime import datetime

TOKEN = '7568390894:AAELswDagoZKnQAGznKwLg49dD6jEsq4OUU'
API_URL = f'https://api.telegram.org/bot{TOKEN}/'

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB = {
    'users': {},
    'products': {},
    'orders': {},
    'cart': {}
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def save_db():
    try:
        if not os.path.exists('database'):
            os.makedirs('database')
        with open('database/market.json', 'w', encoding='utf-8') as f:
            json.dump(DB, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

def load_db():
    global DB
    try:
        if os.path.exists('database/market.json'):
            with open('database/market.json', 'r', encoding='utf-8') as f:
                DB = json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")

def call_telegram(method, params=None):
    try:
        url = f'https://api.telegram.org/bot{TOKEN}/{method}'
        if params:
            data = urllib.parse.urlencode(params).encode()
            req = urllib.request.Request(url, data=data)
        else:
            req = urllib.request.Request(url)
        
        return json.loads(urllib.request.urlopen(req).read().decode())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ API: {e}")
        return None

def send_message(chat_id, text, keyboard=None):
    try:
        params = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if keyboard:
            params['reply_markup'] = json.dumps(keyboard)
        
        return call_telegram('sendMessage', params)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_file(chat_id, file_path):
    try:
        url = f'https://api.telegram.org/bot{TOKEN}/sendDocument'
        with open(file_path, 'rb') as file:
            file_data = file.read()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º multipart/form-data –∑–∞–ø—Ä–æ—Å
        boundary = '----WebKitFormBoundary7MA4YWxkTrZu0gW'
        headers = {
            'Content-Type': f'multipart/form-data; boundary={boundary}'
        }
        
        body = (
            f'--{boundary}\r\n'
            f'Content-Disposition: form-data; name="chat_id"\r\n\r\n'
            f'{chat_id}\r\n'
            f'--{boundary}\r\n'
            f'Content-Disposition: form-data; name="document"; filename="{os.path.basename(file_path)}"\r\n'
            f'Content-Type: application/octet-stream\r\n\r\n'
        ).encode() + file_data + f'\r\n--{boundary}--\r\n'.encode()
        
        req = urllib.request.Request(url, data=body, headers=headers)
        response = urllib.request.urlopen(req)
        return json.loads(response.read().decode())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def get_updates(offset=0):
    try:
        params = {
            'offset': offset,
            'timeout': 30
        }
        return call_telegram('getUpdates', params)['result']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []

def get_keyboard():
    return {
        'keyboard': [
            ['üõç –¢–æ–≤–∞—Ä—ã', 'üîç –ü–æ–∏—Å–∫'],
            ['üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['üí∞ –ë–∞–ª–∞–Ω—Å', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å']
        ],
        'resize_keyboard': True
    }

def get_products_keyboard():
    products = get_available_products()
    keyboard = {
        'inline_keyboard': []
    }
    for product in products:
        keyboard['inline_keyboard'].append([
            {
                'text': f"{product['name']} - {product['price']} RUB",
                'callback_data': f"add_{product['name']}"
            }
        ])
    return keyboard

def get_cart_keyboard():
    return {
        'inline_keyboard': [
            [
                {
                    'text': "üõí –ö—É–ø–∏—Ç—å –≤—Å—ë",
                    'callback_data': "buy_all"
                }
            ]
        ]
    }

def handle_user(message):
    try:
        user_id = str(message['from']['id'])
        if user_id not in DB['users']:
            DB['users'][user_id] = {
                'username': message['from'].get('username', ''),
                'balance': 0,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                'cart': [],
                'orders': []
            }
            save_db()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def get_available_products():
    products = []
    try:
        if os.path.exists('tov'):
            for filename in os.listdir('tov'):
                if filename.endswith('.json'):
                    with open(os.path.join('tov', filename), 'r', encoding='utf-8') as f:
                        product = json.load(f)
                        product['filename'] = filename  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        products.append(product)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    return products

def add_to_cart(user_id, product_name):
    products = get_available_products()
    product = next((p for p in products if p['name'] == product_name), None)
    if product:
        DB['users'][user_id]['cart'].append(product)
        save_db()
        return True
    return False

def buy_cart(user_id):
    user = DB['users'][user_id]
    total_price = sum(p['price'] for p in user['cart'])
    if user['balance'] >= total_price:
        user['balance'] -= total_price
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∫—É–ø–∫–∏
        for product in user['cart']:
            file_path = product.get('file')
            if file_path and os.path.exists(file_path):
                send_file(user_id, file_path)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            else:
                print(f"–§–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ tov –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        for product in user['cart']:
            file_path = os.path.join('tov', product['filename'])
            if os.path.exists(file_path):
                os.remove(file_path)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        user['cart'] = []
        save_db()
        return True
    return False

def print_flipper_zero():
    orange = '\033[38;5;78m'  
    text = """
     ____.             .__    _________.__                   
    |    | ____ _____  |  |  /   _____/|  |__   ____ ______  
    |    |/ __ \\__  \ |  |  \_____  \ |  |  \ /  _ \\____ \ 
/\__|    \  ___/ / __ \|  |__/        \|   Y  (  <_> )  |_> >
\________|\___  >____  /____/_______  /|___|  /\____/|   __/ 
              \/     \/             \/      \/       |__|    """

    print(text)

def main():
    try:
        print_flipper_zero()
        
        print("\033[93m–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞...\033[0m")
        for i in range(31):
            progress = i / 30 * 29.3
            bar = "=" * i + " " * (30-i)
            print(f"\r[{bar}] {progress:.1f}mb/29.3mb", end="")
            time.sleep(0.1)
        print("\n\033[92m–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\033[0m")
        
        if not os.path.exists('database'):
            os.makedirs('database')
        
        load_db()
        offset = 0
        
        while True:
            try:
                updates = get_updates(offset)
                
                for update in updates:
                    offset = update['update_id'] + 1
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
                    if 'callback_query' in update:
                        callback_query = update['callback_query']
                        chat_id = callback_query['message']['chat']['id']
                        user_id = str(callback_query['from']['id'])
                        data = callback_query['data']
                        
                        if data.startswith('add_'):
                            product_name = data.split('_')[1]
                            if add_to_cart(user_id, product_name):
                                send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
                            else:
                                send_message(chat_id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        
                        elif data == 'buy_all':
                            if buy_cart(user_id):
                                send_message(chat_id, "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∫—É–ø–ª–µ–Ω—ã! –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                            else:
                                send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                        continue
                    
                    if 'message' not in update:
                        continue
                    
                    message = update['message']
                    if 'text' not in message:
                        continue
                    
                    chat_id = message['chat']['id']
                    user_id = str(message['from']['id'])
                    text = message['text']
                    
                    if not handle_user(message):
                        continue
                    
                    if text == '/start':
                        send_message(chat_id, "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JealShopü¶ú!", get_keyboard())
                    
                    elif text == 'üõç –¢–æ–≤–∞—Ä—ã':
                        products = get_available_products()
                        if products:
                            send_message(chat_id, "üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", get_products_keyboard())
                        else:
                            send_message(chat_id, "üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
                        
                    elif text == 'üîç –ü–æ–∏—Å–∫':
                        send_message(chat_id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
                        
                    elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
                        user = DB['users'][user_id]
                        if user['cart']:
                            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
                            cart_text += "\n".join([f"{p['name']} - {p['price']} RUB" for p in user['cart']])
                            cart_text += f"\n\n–ò—Ç–æ–≥–æ: {sum(p['price'] for p in user['cart'])} RUB"
                            send_message(chat_id, cart_text, get_cart_keyboard())
                        else:
                            send_message(chat_id, "üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
                        
                    elif text == 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã':
                        user = DB['users'][user_id]
                        if user['orders']:
                            orders_text = "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
                            orders_text += "\n".join([f"{p['name']} - {p['price']} RUB" for p in user['orders']])
                            send_message(chat_id, orders_text)
                        else:
                            send_message(chat_id, "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                        
                    elif text == 'üí∞ –ë–∞–ª–∞–Ω—Å':
                        user = DB['users'][user_id]
                        send_message(chat_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} RUB")
                        
                    elif text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        user = DB['users'][user_id]
                        profile_text = f"""üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
ID: {user_id}
Username: @{user['username']}
–ë–∞–ª–∞–Ω—Å: {user['balance']} RUB
–ó–∞–∫–∞–∑–æ–≤: {len(user['orders'])}"""
                        send_message(chat_id, profile_text)
                
                time.sleep(1)
                
            except Exception as e:
                print(f"\033[91m–û—à–∏–±–∫–∞: {e}\033[0m")
                time.sleep(5)
                
    except Exception as e:
        print(f"\033[91m–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\033[0m")

main()